// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contribution extends ethereum.Event {
  get params(): Contribution__Params {
    return new Contribution__Params(this);
  }
}

export class Contribution__Params {
  _event: Contribution;

  constructor(event: Contribution) {
    this._event = event;
  }

  get contributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get project_id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get date(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class Refund extends ethereum.Event {
  get params(): Refund__Params {
    return new Refund__Params(this);
  }
}

export class Refund__Params {
  _event: Refund;

  constructor(event: Refund) {
    this._event = event;
  }

  get contributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get project_id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get date(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EthQF__getDetailsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class EthQF__getProjectInstallmentDetailsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class EthQF__getResultResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class EthQF__getinstallmentCollectionResultValue0Struct extends ethereum.Tuple {
  get yes(): BigInt {
    return this[0].toBigInt();
  }

  get no(): BigInt {
    return this[1].toBigInt();
  }

  get contributors(): BigInt {
    return this[2].toBigInt();
  }

  get date(): string {
    return this[3].toString();
  }
}

export class EthQF__getprojectCollectionResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get ipfsHash(): string {
    return this[1].toString();
  }

  get crowdfundAmount(): BigInt {
    return this[2].toBigInt();
  }

  get sqrtAmount(): BigInt {
    return this[3].toBigInt();
  }

  get no_of_installments(): BigInt {
    return this[4].toBigInt();
  }

  get remaining_installments(): BigInt {
    return this[5].toBigInt();
  }

  get installment_ids(): Array<BigInt> {
    return this[6].toBigIntArray();
  }

  get date(): string {
    return this[7].toString();
  }

  get installment_amount(): BigInt {
    return this[8].toBigInt();
  }

  get amountToRaise(): string {
    return this[9].toString();
  }
}

export class EthQF__installmentsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: string;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    return map;
  }
}

export class EthQF__projectCollectionResult {
  value0: Address;
  value1: string;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: string;
  value7: BigInt;
  value8: string;

  constructor(
    value0: Address,
    value1: string,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: string,
    value7: BigInt,
    value8: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromString(this.value8));
    return map;
  }
}

export class EthQF__projectDetailsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class EthQF__projectsResult {
  value0: Address;
  value1: string;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: string;
  value7: BigInt;
  value8: string;

  constructor(
    value0: Address,
    value1: string,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: string,
    value7: BigInt,
    value8: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromString(this.value8));
    return map;
  }
}

export class EthQF__roundProjectidsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class EthQF__sponsorsResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class EthQF extends ethereum.SmartContract {
  static bind(address: Address): EthQF {
    return new EthQF("EthQF", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  check_contributed_to(param0: BigInt, param1: Address): boolean {
    let result = super.call(
      "check_contributed_to",
      "check_contributed_to(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );

    return result[0].toBoolean();
  }

  try_check_contributed_to(
    param0: BigInt,
    param1: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "check_contributed_to",
      "check_contributed_to(uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromAddress(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  contractBalance(): BigInt {
    let result = super.call(
      "contractBalance",
      "contractBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_contractBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractBalance",
      "contractBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  contributedTo(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "contributedTo",
      "contributedTo(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_contributedTo(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "contributedTo",
      "contributedTo(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  contributorVotingStatus(
    param0: BigInt,
    param1: BigInt,
    param2: Address
  ): boolean {
    let result = super.call(
      "contributorVotingStatus",
      "contributorVotingStatus(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );

    return result[0].toBoolean();
  }

  try_contributorVotingStatus(
    param0: BigInt,
    param1: BigInt,
    param2: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "contributorVotingStatus",
      "contributorVotingStatus(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
        ethereum.Value.fromAddress(param2)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getContributorVotingStatus(
    _project_id: BigInt,
    _installment_id: BigInt,
    _address: Address
  ): boolean {
    let result = super.call(
      "getContributorVotingStatus",
      "getContributorVotingStatus(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_project_id),
        ethereum.Value.fromUnsignedBigInt(_installment_id),
        ethereum.Value.fromAddress(_address)
      ]
    );

    return result[0].toBoolean();
  }

  try_getContributorVotingStatus(
    _project_id: BigInt,
    _installment_id: BigInt,
    _address: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getContributorVotingStatus",
      "getContributorVotingStatus(uint256,uint256,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_project_id),
        ethereum.Value.fromUnsignedBigInt(_installment_id),
        ethereum.Value.fromAddress(_address)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getDetails(): EthQF__getDetailsResult {
    let result = super.call("getDetails", "getDetails():(uint256,uint256)", []);

    return new EthQF__getDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getDetails(): ethereum.CallResult<EthQF__getDetailsResult> {
    let result = super.tryCall(
      "getDetails",
      "getDetails():(uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EthQF__getDetailsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getProjectInstallmentDetails(
    _project_id: BigInt
  ): EthQF__getProjectInstallmentDetailsResult {
    let result = super.call(
      "getProjectInstallmentDetails",
      "getProjectInstallmentDetails(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_project_id)]
    );

    return new EthQF__getProjectInstallmentDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getProjectInstallmentDetails(
    _project_id: BigInt
  ): ethereum.CallResult<EthQF__getProjectInstallmentDetailsResult> {
    let result = super.tryCall(
      "getProjectInstallmentDetails",
      "getProjectInstallmentDetails(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_project_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EthQF__getProjectInstallmentDetailsResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getResult(_project_id: BigInt): EthQF__getResultResult {
    let result = super.call(
      "getResult",
      "getResult(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_project_id)]
    );

    return new EthQF__getResultResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getResult(
    _project_id: BigInt
  ): ethereum.CallResult<EthQF__getResultResult> {
    let result = super.tryCall(
      "getResult",
      "getResult(uint256):(uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_project_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EthQF__getResultResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getRoundSpecificSponsors(_round_id: BigInt): Array<Address> {
    let result = super.call(
      "getRoundSpecificSponsors",
      "getRoundSpecificSponsors(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_round_id)]
    );

    return result[0].toAddressArray();
  }

  try_getRoundSpecificSponsors(
    _round_id: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getRoundSpecificSponsors",
      "getRoundSpecificSponsors(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_round_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getcontributedTo(_project_id: BigInt): Array<Address> {
    let result = super.call(
      "getcontributedTo",
      "getcontributedTo(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_project_id)]
    );

    return result[0].toAddressArray();
  }

  try_getcontributedTo(
    _project_id: BigInt
  ): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getcontributedTo",
      "getcontributedTo(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(_project_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getinstallmentCollection(
    _project_id: BigInt
  ): Array<EthQF__getinstallmentCollectionResultValue0Struct> {
    let result = super.call(
      "getinstallmentCollection",
      "getinstallmentCollection(uint256):((uint256,uint256,uint256,string)[])",
      [ethereum.Value.fromUnsignedBigInt(_project_id)]
    );

    return result[0].toTupleArray<
      EthQF__getinstallmentCollectionResultValue0Struct
    >();
  }

  try_getinstallmentCollection(
    _project_id: BigInt
  ): ethereum.CallResult<
    Array<EthQF__getinstallmentCollectionResultValue0Struct>
  > {
    let result = super.tryCall(
      "getinstallmentCollection",
      "getinstallmentCollection(uint256):((uint256,uint256,uint256,string)[])",
      [ethereum.Value.fromUnsignedBigInt(_project_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<EthQF__getinstallmentCollectionResultValue0Struct>()
    );
  }

  getprojectCollection(
    _address: Address
  ): Array<EthQF__getprojectCollectionResultValue0Struct> {
    let result = super.call(
      "getprojectCollection",
      "getprojectCollection(address):((address,string,uint256,uint256,uint256,uint256,uint256[],string,uint256,string)[])",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toTupleArray<
      EthQF__getprojectCollectionResultValue0Struct
    >();
  }

  try_getprojectCollection(
    _address: Address
  ): ethereum.CallResult<Array<EthQF__getprojectCollectionResultValue0Struct>> {
    let result = super.tryCall(
      "getprojectCollection",
      "getprojectCollection(address):((address,string,uint256,uint256,uint256,uint256,uint256[],string,uint256,string)[])",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<EthQF__getprojectCollectionResultValue0Struct>()
    );
  }

  getprojectIdCollection(_address: Address): Array<BigInt> {
    let result = super.call(
      "getprojectIdCollection",
      "getprojectIdCollection(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );

    return result[0].toBigIntArray();
  }

  try_getprojectIdCollection(
    _address: Address
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getprojectIdCollection",
      "getprojectIdCollection(address):(uint256[])",
      [ethereum.Value.fromAddress(_address)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getprojectInstallmentIds(_project_id: BigInt): Array<BigInt> {
    let result = super.call(
      "getprojectInstallmentIds",
      "getprojectInstallmentIds(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_project_id)]
    );

    return result[0].toBigIntArray();
  }

  try_getprojectInstallmentIds(
    _project_id: BigInt
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getprojectInstallmentIds",
      "getprojectInstallmentIds(uint256):(uint256[])",
      [ethereum.Value.fromUnsignedBigInt(_project_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  installment_id(): BigInt {
    let result = super.call("installment_id", "installment_id():(uint256)", []);

    return result[0].toBigInt();
  }

  try_installment_id(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "installment_id",
      "installment_id():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  installments(param0: BigInt, param1: BigInt): EthQF__installmentsResult {
    let result = super.call(
      "installments",
      "installments(uint256,uint256):(uint256,uint256,uint256,string)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new EthQF__installmentsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toString()
    );
  }

  try_installments(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<EthQF__installmentsResult> {
    let result = super.tryCall(
      "installments",
      "installments(uint256,uint256):(uint256,uint256,uint256,string)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EthQF__installmentsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toString()
      )
    );
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidity_pool_amount(): BigInt {
    let result = super.call(
      "liquidity_pool_amount",
      "liquidity_pool_amount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidity_pool_amount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidity_pool_amount",
      "liquidity_pool_amount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  projectCollection(
    param0: Address,
    param1: BigInt
  ): EthQF__projectCollectionResult {
    let result = super.call(
      "projectCollection",
      "projectCollection(address,uint256):(address,string,uint256,uint256,uint256,uint256,string,uint256,string)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new EthQF__projectCollectionResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toString(),
      result[7].toBigInt(),
      result[8].toString()
    );
  }

  try_projectCollection(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<EthQF__projectCollectionResult> {
    let result = super.tryCall(
      "projectCollection",
      "projectCollection(address,uint256):(address,string,uint256,uint256,uint256,uint256,string,uint256,string)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EthQF__projectCollectionResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toString(),
        value[7].toBigInt(),
        value[8].toString()
      )
    );
  }

  projectDetails(_project_id: BigInt): EthQF__projectDetailsResult {
    let result = super.call(
      "projectDetails",
      "projectDetails(uint256):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_project_id)]
    );

    return new EthQF__projectDetailsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_projectDetails(
    _project_id: BigInt
  ): ethereum.CallResult<EthQF__projectDetailsResult> {
    let result = super.tryCall(
      "projectDetails",
      "projectDetails(uint256):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_project_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EthQF__projectDetailsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  projectIdCollection(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "projectIdCollection",
      "projectIdCollection(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_projectIdCollection(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "projectIdCollection",
      "projectIdCollection(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  projectSqrtAmount(_project_id: BigInt): BigInt {
    let result = super.call(
      "projectSqrtAmount",
      "projectSqrtAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_project_id)]
    );

    return result[0].toBigInt();
  }

  try_projectSqrtAmount(_project_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "projectSqrtAmount",
      "projectSqrtAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_project_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  project_id(): BigInt {
    let result = super.call("project_id", "project_id():(uint256)", []);

    return result[0].toBigInt();
  }

  try_project_id(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("project_id", "project_id():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  project_sum_amount(param0: BigInt): BigInt {
    let result = super.call(
      "project_sum_amount",
      "project_sum_amount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_project_sum_amount(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "project_sum_amount",
      "project_sum_amount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  projects(param0: BigInt): EthQF__projectsResult {
    let result = super.call(
      "projects",
      "projects(uint256):(address,string,uint256,uint256,uint256,uint256,string,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new EthQF__projectsResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toString(),
      result[7].toBigInt(),
      result[8].toString()
    );
  }

  try_projects(param0: BigInt): ethereum.CallResult<EthQF__projectsResult> {
    let result = super.tryCall(
      "projects",
      "projects(uint256):(address,string,uint256,uint256,uint256,uint256,string,uint256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EthQF__projectsResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toString(),
        value[7].toBigInt(),
        value[8].toString()
      )
    );
  }

  roundProjectids(param0: BigInt): EthQF__roundProjectidsResult {
    let result = super.call(
      "roundProjectids",
      "roundProjectids(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new EthQF__roundProjectidsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_roundProjectids(
    param0: BigInt
  ): ethereum.CallResult<EthQF__roundProjectidsResult> {
    let result = super.tryCall(
      "roundProjectids",
      "roundProjectids(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EthQF__roundProjectidsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  roundSpecificSponsor(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "roundSpecificSponsor",
      "roundSpecificSponsor(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_roundSpecificSponsor(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "roundSpecificSponsor",
      "roundSpecificSponsor(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  roundStatus(param0: BigInt): boolean {
    let result = super.call("roundStatus", "roundStatus(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_roundStatus(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("roundStatus", "roundStatus(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  round_id(): BigInt {
    let result = super.call("round_id", "round_id():(uint256)", []);

    return result[0].toBigInt();
  }

  try_round_id(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("round_id", "round_id():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sponsor_id(): BigInt {
    let result = super.call("sponsor_id", "sponsor_id():(uint256)", []);

    return result[0].toBigInt();
  }

  try_sponsor_id(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("sponsor_id", "sponsor_id():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sponsors(param0: BigInt): EthQF__sponsorsResult {
    let result = super.call("sponsors", "sponsors(uint256):(address,uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return new EthQF__sponsorsResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_sponsors(param0: BigInt): ethereum.CallResult<EthQF__sponsorsResult> {
    let result = super.tryCall(
      "sponsors",
      "sponsors(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EthQF__sponsorsResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSponsors(): BigInt {
    let result = super.call("totalSponsors", "totalSponsors():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSponsors(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSponsors",
      "totalSponsors():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  total_amount(): BigInt {
    let result = super.call("total_amount", "total_amount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_total_amount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("total_amount", "total_amount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CastFirstVoteCall extends ethereum.Call {
  get inputs(): CastFirstVoteCall__Inputs {
    return new CastFirstVoteCall__Inputs(this);
  }

  get outputs(): CastFirstVoteCall__Outputs {
    return new CastFirstVoteCall__Outputs(this);
  }
}

export class CastFirstVoteCall__Inputs {
  _call: CastFirstVoteCall;

  constructor(call: CastFirstVoteCall) {
    this._call = call;
  }

  get _voter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _project_id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get vote(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _date(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CastFirstVoteCall__Outputs {
  _call: CastFirstVoteCall;

  constructor(call: CastFirstVoteCall) {
    this._call = call;
  }
}

export class CastVoteCall extends ethereum.Call {
  get inputs(): CastVoteCall__Inputs {
    return new CastVoteCall__Inputs(this);
  }

  get outputs(): CastVoteCall__Outputs {
    return new CastVoteCall__Outputs(this);
  }
}

export class CastVoteCall__Inputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }

  get _voter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _project_id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get vote(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CastVoteCall__Outputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }
}

export class CreateProjectCall extends ethereum.Call {
  get inputs(): CreateProjectCall__Inputs {
    return new CreateProjectCall__Inputs(this);
  }

  get outputs(): CreateProjectCall__Outputs {
    return new CreateProjectCall__Outputs(this);
  }
}

export class CreateProjectCall__Inputs {
  _call: CreateProjectCall;

  constructor(call: CreateProjectCall) {
    this._call = call;
  }

  get _creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ipfsHash(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _no_of_installments(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _date(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _amountToRaise(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class CreateProjectCall__Outputs {
  _call: CreateProjectCall;

  constructor(call: CreateProjectCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class EnrollSponsorCall extends ethereum.Call {
  get inputs(): EnrollSponsorCall__Inputs {
    return new EnrollSponsorCall__Inputs(this);
  }

  get outputs(): EnrollSponsorCall__Outputs {
    return new EnrollSponsorCall__Outputs(this);
  }
}

export class EnrollSponsorCall__Inputs {
  _call: EnrollSponsorCall;

  constructor(call: EnrollSponsorCall) {
    this._call = call;
  }

  get _round_id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _sponsor(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class EnrollSponsorCall__Outputs {
  _call: EnrollSponsorCall;

  constructor(call: EnrollSponsorCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MakeContributionCall extends ethereum.Call {
  get inputs(): MakeContributionCall__Inputs {
    return new MakeContributionCall__Inputs(this);
  }

  get outputs(): MakeContributionCall__Outputs {
    return new MakeContributionCall__Outputs(this);
  }
}

export class MakeContributionCall__Inputs {
  _call: MakeContributionCall;

  constructor(call: MakeContributionCall) {
    this._call = call;
  }

  get _contributor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _project_id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get sq_amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _sqrtAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _date(): string {
    return this._call.inputValues[5].value.toString();
  }
}

export class MakeContributionCall__Outputs {
  _call: MakeContributionCall;

  constructor(call: MakeContributionCall) {
    this._call = call;
  }
}

export class RefundContributionCall extends ethereum.Call {
  get inputs(): RefundContributionCall__Inputs {
    return new RefundContributionCall__Inputs(this);
  }

  get outputs(): RefundContributionCall__Outputs {
    return new RefundContributionCall__Outputs(this);
  }
}

export class RefundContributionCall__Inputs {
  _call: RefundContributionCall;

  constructor(call: RefundContributionCall) {
    this._call = call;
  }

  get _amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _address(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _project_id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get date(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class RefundContributionCall__Outputs {
  _call: RefundContributionCall;

  constructor(call: RefundContributionCall) {
    this._call = call;
  }
}

export class RetrieveFirstInstallmentCall extends ethereum.Call {
  get inputs(): RetrieveFirstInstallmentCall__Inputs {
    return new RetrieveFirstInstallmentCall__Inputs(this);
  }

  get outputs(): RetrieveFirstInstallmentCall__Outputs {
    return new RetrieveFirstInstallmentCall__Outputs(this);
  }
}

export class RetrieveFirstInstallmentCall__Inputs {
  _call: RetrieveFirstInstallmentCall;

  constructor(call: RetrieveFirstInstallmentCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _project_id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _quadratic_funding_amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RetrieveFirstInstallmentCall__Outputs {
  _call: RetrieveFirstInstallmentCall;

  constructor(call: RetrieveFirstInstallmentCall) {
    this._call = call;
  }
}

export class RetrieveInstallmentCall extends ethereum.Call {
  get inputs(): RetrieveInstallmentCall__Inputs {
    return new RetrieveInstallmentCall__Inputs(this);
  }

  get outputs(): RetrieveInstallmentCall__Outputs {
    return new RetrieveInstallmentCall__Outputs(this);
  }
}

export class RetrieveInstallmentCall__Inputs {
  _call: RetrieveInstallmentCall;

  constructor(call: RetrieveInstallmentCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _project_id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RetrieveInstallmentCall__Outputs {
  _call: RetrieveInstallmentCall;

  constructor(call: RetrieveInstallmentCall) {
    this._call = call;
  }
}

export class StartRoundCall extends ethereum.Call {
  get inputs(): StartRoundCall__Inputs {
    return new StartRoundCall__Inputs(this);
  }

  get outputs(): StartRoundCall__Outputs {
    return new StartRoundCall__Outputs(this);
  }
}

export class StartRoundCall__Inputs {
  _call: StartRoundCall;

  constructor(call: StartRoundCall) {
    this._call = call;
  }
}

export class StartRoundCall__Outputs {
  _call: StartRoundCall;

  constructor(call: StartRoundCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}
